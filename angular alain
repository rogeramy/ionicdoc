#### git commit 提交的时候报错

Q: husky > pre-commit hook failed (add --no-verify to bypass)

这个问题是因为当你在终端输入git commit -m "XXX",提交代码的时候,pre-commit(客户端)钩子，它会在Git键入提交信息前运行做代码风格检查。如果代码不符合相应规则，则报错，而它的检测规则就是根据.git/hooks/pre-commit文件里面的相关定义

1. 卸载husky。只要把项目的package.json文件中devDependencies节点下的husky库删掉，然后重新npm i 一次即可。或者直接在项目根目录下执行npm uninstall husky --save也可以，再次提交，自动化测试功能就屏蔽掉
2. 进入项目的.git文件夹(文件夹默认隐藏,可先设置显示或者命令ls查找),再进入hooks文件夹,删除pre-commit文件,重新git commit -m 'xxx' git push即可
3. 将git commit -m "XXX" 改为 git commit --no-verify -m "XXX"

目前使用方案2，使用git desktop提交

#### ng-alain环境安装

安装node 10.16.0
安装 angular cli，必须在管理员cmd命令下执行：npm install -g @angular/cli。目前支持7版本，安装7.3.9，npm install -g 
@angular/cli@7.3.9 
可以在后面使用淘宝镜像：--registry=https://registry.npm.taobao.org

安装yarn，管理员cmd执行：npm install -g yarn --registry=https://registry.npm.taobao.org

下载alain
git clone --depth=1 https://github.com/ng-alain/ng-alain.git my-project
cd my-project
yarn
npm start


在 ng-alain 中，一个完整的 Angular 应用从前端 UI 交互到服务端处理流程是这样的：
1、首次启动 Angular 执行 APP_INITIALIZER；
2、UI 组件交互操作；
3、使用 HttpClient 发送请求；
4、触发用户认证拦截器 @delon/auth，统一加入 token 参数；
  a、若未存在 `token` 或已过期中断后续请求，直接跳转至登录页；

5、触发默认拦截器，统一处理前缀等信息；
6、获取服务端返回；
7、触发默认拦截器，统一处理请求异常、业务异常等；
8、数据更新，并刷新 UI。


ng-alain 默认装载了两个拦截器：@delon/auth 用户认证和默认拦截器

本身是为 ng-alain 脚手架提供的一个用户认证模块，包含主流的 JWT（Json Web Token）和一个相对通用 Simple Web Token，而其核心是对认证过程进一步处理。而通常其核心在于用户 Token 的获取、使用环节。
同时，@delon/auth 并不会关心用户界面是怎么样，只需要当登录成功后将后端返回的数据交给 ITokenService，它会帮你存储在 localStorage（默认） 当中；当发起一个网络请求时，它会在自动在 header（默认） 当中加入相应的 token 信息。

因此，@delon/auth 不限于 ng-alain 脚手架，任何 Angular 项目都可以使用它。

默认装载了 SimpleInterceptor 拦截器，意味者一开始使用 ng-alain 为什么会无缘无故无法正确请求，而是直接抛出异常。

服务端如果是基于ASP.NET API 验证方式，传入token为：Authorization: bearer，需要重写
a) ng-alain的用户认证默认发给后端的认信息的key值是token，如过要更改可以在src -> app -> delon.module.ts中修改如下
import { DelonAuthConfig } from '@delon/auth';
export function fnDelonAuthConfig(): DelonAuthConfig {
  // return {
  //   ...new DelonAuthConfig(),
  //   login_url: '/passport/login',
  // };
  return Object.assign(new DelonAuthConfig(), <DelonAuthConfig>{
    login_url: '/passport/login',
    token_send_key: 'Authorization',
    token_send_template: 'Bearer ${token}'
  });

}

设置后台接口服务的basicUrl

修改 src -> environments 文件夹下
生产环境和开发环境的ts文件中的 SERVER_URL
export const environment = {
  SERVER_URL: `http://服务器地址`,
  ....
};

** alain 使用 http post 提示错误：The request entity's media type 'text/plain' is not supported for this resource
.. 客户端不需要使用 json 工具序列化成字符串，再post，直接 post 内传对象 .post('.../api/QLogic/AddQues', postdata, headers)，不能使用 JSON.stringify，否则request头就不是Content-Type: application/json，而是Content-Type: text/plain

** alain 发布，IIS网站的子目录下，需要重写 build ，否则导致引用的css，script文件路径不正确
.. package.json 文件，"build": "npm run color-less && ng build --prod --build-optimizer --base-href ./", 加上后面这部分： --base-href ./

** npm start 编译时候出错，JavaScript heap out of memory
.. 初步判断是执行 color-less文件内容时候出错，可能和agalain升级到支持angular8有关，暂时解决办法先把执行color-less代码去掉：package.json文件内改成：
   "start": "ng serve -o","build": "ng build --prod --build-optimizer --base-href ./",

** <nz-option [nzValue]="1" [nzLabel]="'南向'"></nz-option> nzValue在中括号内，值1是数字，<nz-option nzValue="1" [nzLabel]="'南向'"></nz-option> 这种方式1是字符串，如果后台ngmodel数据是数字，则无法选中

** select 重置选择（去掉选择项），设置ngModel对应的值为null，不能设置-1等其它数字



##### alain封装G2组件不显示图表

图表不能显示，拖动浏览器可以显示，主要因为图表在数据没有准备好之前先渲染了。需要配置一个延迟加载量，但延迟加载时间是无法把握的，如果是来自网络的数据源，最佳做法是使用 *ngIf 做判断，数据源准备好之后才渲染